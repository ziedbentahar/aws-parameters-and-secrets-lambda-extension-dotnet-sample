AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda with Url Function Exposed with Cloudfront

Parameters:
  Application:
    Type: String
  Environment:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
  LambdaName:
    Type: String
  LambdaHandler:
    Type: String
  LambdaBucketName:
    Type: String
  LambdaZipFile:
    Type: String

Mappings: 
  RegionToLayerArnMap: 
    us-east-1: 
      "LayerArn": "arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"
    us-east-2: 
      "LayerArn": "arn:aws:lambda:us-east-2:590474943231:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"
    eu-west-1: 
      "LayerArn": "arn:aws:lambda:eu-west-1:015030872274:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"
    eu-west-2: 
      "LayerArn": "arn:aws:lambda:eu-west-2:133256977650:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"
    eu-west-3: 
      "LayerArn": "arn:aws:lambda:eu-west-3:780235371811:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"
        

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: read-secret
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !GetAtt Secret.Arn

     
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Application}-${Environment}-${LambdaName}
      Code:
        S3Bucket: !Sub ${LambdaBucketName}
        S3Key: !Sub ${LambdaZipFile}
      Handler: !Sub ${LambdaHandler}
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - arm64
      Runtime: dotnet6
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          SECRET_NAME: SomeSecret
      Layers:
        - !FindInMap [RegionToLayerArnMap, !Ref "AWS::Region", LayerArn]

  
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${Application}-${Environment}-apigw
      Description: An Amazon API Gateway HTTP API and an AWS Lambda function.
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations
  
  FunctionResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'
      FunctionName: !GetAtt LambdaFunction.Arn    

  Secret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Name: SomeSecret
      GenerateSecretString: 
        "SecretStringTemplate": "{}"
        "GenerateStringKey": "password"
        "PasswordLength": 30
        
      
  
  
  